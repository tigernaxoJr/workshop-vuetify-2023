import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1eafcbb1.js";const h=JSON.parse('{"title":"響應式狀態","description":"","frontmatter":{},"headers":[],"relativePath":"workshop/vue3/reactivity.md","filePath":"workshop/vue3/reactivity.md"}'),p={name:"workshop/vue3/reactivity.md"},o=l(`<h1 id="響應式狀態" tabindex="-1">響應式狀態 <a class="header-anchor" href="#響應式狀態" aria-label="Permalink to &quot;響應式狀態&quot;">​</a></h1><h2 id="ref" tabindex="-1">ref() <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref()&quot;">​</a></h2><ul><li>ref 依賴跟蹤原理基於 getter、setter，所以取用時最後會加上一個 value：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pseudo code, not actual implementation</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _value: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">track</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._value</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pseudo code, not actual implementation</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  _value: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">track</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._value</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li>template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count) </span><span style="color:#6A737D;">// { value: 0 }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ count }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count) </span><span style="color:#6A737D;">// { value: 0 }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">count.value</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count.value) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><h3 id="shallowref" tabindex="-1">shallowRef() <a class="header-anchor" href="#shallowref" aria-label="Permalink to &quot;shallowRef()&quot;">​</a></h3><p>Deep Reactivity：ref 預設會跟蹤其內部的所有對象，如果不是基本(privative)數據類型，它會自動使用 reactive() 來將對象轉換為代理(proxy)。 淺層(Shallow) refs：用於改進性能（當您不希望跟蹤 ref 下的大型對象時），或是 ref 內部對象的狀態由外部函數庫管理。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shallowRef</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">state.value.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 無反應</span></span>
<span class="line"><span style="color:#E1E4E8;">state.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { count: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } </span><span style="color:#6A737D;">// 有反應</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shallowRef</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">state.value.count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 無反應</span></span>
<span class="line"><span style="color:#24292E;">state.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { count: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">// 有反應</span></span></code></pre></div><h2 id="reactive" tabindex="-1">reactive() <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive()&quot;">​</a></h2><ul><li>原理是 javascript proxy。</li><li>只能包裝物件(object, Array, Map/Set ...)，不能包裝基本數據類型。</li><li>使用時不需要加 .value。</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;state.count++&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ state.count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;state.count++&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ state.count }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="試試看" tabindex="-1"><a href="https://play.vuejs.org/#eNqNUU1P3DAQ/SsjXwDBxkj0tF3QthWH9tBWbY+5BGdYDP6SPVlWivLfO3YghOVD3Ox5b+a9edOLLyFU2w7FUqwIbTAN4UXtAFZXHZF3sFZGq7vzWiRiqFK+c3R8XItCAuh7mAEwDKVXjs3MWcnZVP4mFXUgSEhdKCO0DT4S9BCxUaS3CANcR2/hgF0dfM4U5V3iliwD5xPvsGeANZdwCsPRRPQGK+M3hzNXRyAlnGYvo/qFOBGj7MI2obpN3vH6fZ5QPwCpFksolVxjJ/lfixuikJZSqtZxW4tGb2PlkKQLVq6ZJiPraYuL1tv1WXVWfZKtTjQvV5js4ir6+4SRh9TiZCYjubjFuIjoWowYPyq71zaX3oNeyGd1vtrAoVDiBK/1Zi8S5W3QBuOvQJoTfhZNY4y//1FqFDucdlE3qO5eqd+m3bjT74jF2Wx/auIGaYQv//7EHb8n0Pq2Mw9neAP8g3z9LnscaV8717LtGa+4/V4urN3mX7rcEbr0uFQ2WtIo/HKPb++s/mSX055SHP4D1Xge7g==" target="_blank" rel="noreferrer">試試看</a> <a class="header-anchor" href="#試試看" aria-label="Permalink to &quot;[試試看](https://play.vuejs.org/#eNqNUU1P3DAQ/SsjXwDBxkj0tF3QthWH9tBWbY+5BGdYDP6SPVlWivLfO3YghOVD3Ox5b+a9edOLLyFU2w7FUqwIbTAN4UXtAFZXHZF3sFZGq7vzWiRiqFK+c3R8XItCAuh7mAEwDKVXjs3MWcnZVP4mFXUgSEhdKCO0DT4S9BCxUaS3CANcR2/hgF0dfM4U5V3iliwD5xPvsGeANZdwCsPRRPQGK+M3hzNXRyAlnGYvo/qFOBGj7MI2obpN3vH6fZ5QPwCpFksolVxjJ/lfixuikJZSqtZxW4tGb2PlkKQLVq6ZJiPraYuL1tv1WXVWfZKtTjQvV5js4ir6+4SRh9TiZCYjubjFuIjoWowYPyq71zaX3oNeyGd1vtrAoVDiBK/1Zi8S5W3QBuOvQJoTfhZNY4y//1FqFDucdlE3qO5eqd+m3bjT74jF2Wx/auIGaYQv//7EHb8n0Pq2Mw9neAP8g3z9LnscaV8717LtGa+4/V4urN3mX7rcEbr0uFQ2WtIo/HKPb++s/mSX055SHP4D1Xge7g==)&quot;">​</a></h3><h3 id="shallowreactive" tabindex="-1">shallowReactive() <a class="header-anchor" href="#shallowreactive" aria-label="Permalink to &quot;shallowReactive()&quot;">​</a></h3><p>同 shallwRef()</p><h2 id="常犯的錯誤" tabindex="-1">常犯的錯誤 <a class="header-anchor" href="#常犯的錯誤" aria-label="Permalink to &quot;常犯的錯誤&quot;">​</a></h2><ul><li>直接把變數指向其他響應式數據(以為更改響應式數據內容)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// state 現在指向 reactive({ count: 1 }) 這個 proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 現在沒有變數指向 reactive({ count: 0 }) 這個 proxy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// state 現在指向 reactive({ count: 1 }) 這個 proxy</span></span>
<span class="line"><span style="color:#24292E;">state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 現在沒有變數指向 reactive({ count: 0 }) 這個 proxy</span></span></code></pre></div><ul><li>解構賦值(destructure)的內容失去響應性</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// count 現在就只是一個初級資料結構，沒有響應性</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> { count } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#6A737D;">// 不會影響到 state.count</span></span>
<span class="line"><span style="color:#E1E4E8;">count</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// count 現在就只是一個初級資料結構，沒有響應性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { count } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> state</span></span>
<span class="line"><span style="color:#6A737D;">// 不會影響到 state.count</span></span>
<span class="line"><span style="color:#24292E;">count</span><span style="color:#D73A49;">++</span></span></code></pre></div><h3 id="試看看" tabindex="-1"><a href="https://play.vuejs.org/#eNqNUsFu00AQ/ZWRL23VxqYqp5BUhaoHOAACjr649jTd1N61dtdpUBQJCSSEaFFB4gKRQLSip0qUXhBQ8TO1W/6CsdcJTkiBk70z7+2892Z71vU4tjsJWnWroTGKQ0/jsssBGuuJ1oLDih8yf6vpWkKyFuO2LxKu5+ddaxl6PVCa8KYG/T40HMOafgPjHS9kwWp+zPnV8z+o48TptIZTMUBH5UsWa1Cok5gqLIqF1NADiZ6vWQehDxtSRDBD9meu5RTHAex6dAfWjbMFMK4h23ma7r08+7Kb7u2cv3kyvIPphxB42iuo6dv32dFByRjmBOmn3bGUss+vssGz9PT457sfLg+RBOZdaI50zfaggNbhCvTnSFgOKnU0Ddrll5MWDckXXIkQ7VC0ZgvwHJDGKqp0nAus2BHrbfQ1XBzuZ4fPL04+po++Z4PH6cFx+uJbBWcG6PEdNmF2Dpr0MPId5qrLcZT0SDiUpWb5nYdFl5MWUpId7Z9/+Erxnp0OspPXwxFTBlQCpadImze7XrYWLLPmWuTFdlsJTu+6UEOvr2go16obfXmNNp+fXWtT61jVHccPONECDFlH2hy1w+PIWSGYI2kWi7AWiGhlyV6yrzoBU7patlFFtXUpthVKusS1FipjHCp2UNYk8gAlyv8dO0Grjp5o/TE+n07B9ikUrSjKDdaaiMQXUcxClHdizSjqsWi8MBTbt4qalgmOvPib6G9NqbdV13i6K7FQVvGvPdlCbdpr929jl/5HzUgESViu4ZLmPaSnnOQaDexGwgOSXcEVam8WG2a89UCtdTVyNTSVCy3SKPDFPlb/Yv23XEp7lGL/F5BV33c=" target="_blank" rel="noreferrer">試看看</a> <a class="header-anchor" href="#試看看" aria-label="Permalink to &quot;[試看看](https://play.vuejs.org/#eNqNUsFu00AQ/ZWRL23VxqYqp5BUhaoHOAACjr649jTd1N61dtdpUBQJCSSEaFFB4gKRQLSip0qUXhBQ8TO1W/6CsdcJTkiBk70z7+2892Z71vU4tjsJWnWroTGKQ0/jsssBGuuJ1oLDih8yf6vpWkKyFuO2LxKu5+ddaxl6PVCa8KYG/T40HMOafgPjHS9kwWp+zPnV8z+o48TptIZTMUBH5UsWa1Cok5gqLIqF1NADiZ6vWQehDxtSRDBD9meu5RTHAex6dAfWjbMFMK4h23ma7r08+7Kb7u2cv3kyvIPphxB42iuo6dv32dFByRjmBOmn3bGUss+vssGz9PT457sfLg+RBOZdaI50zfaggNbhCvTnSFgOKnU0Ddrll5MWDckXXIkQ7VC0ZgvwHJDGKqp0nAus2BHrbfQ1XBzuZ4fPL04+po++Z4PH6cFx+uJbBWcG6PEdNmF2Dpr0MPId5qrLcZT0SDiUpWb5nYdFl5MWUpId7Z9/+Erxnp0OspPXwxFTBlQCpadImze7XrYWLLPmWuTFdlsJTu+6UEOvr2go16obfXmNNp+fXWtT61jVHccPONECDFlH2hy1w+PIWSGYI2kWi7AWiGhlyV6yrzoBU7patlFFtXUpthVKusS1FipjHCp2UNYk8gAlyv8dO0Grjp5o/TE+n07B9ikUrSjKDdaaiMQXUcxClHdizSjqsWi8MBTbt4qalgmOvPib6G9NqbdV13i6K7FQVvGvPdlCbdpr929jl/5HzUgESViu4ZLmPaSnnOQaDexGwgOSXcEVam8WG2a89UCtdTVyNTSVCy3SKPDFPlb/Yv23XEp7lGL/F5BV33c=)&quot;">​</a></h3><h2 id="nexttick" tabindex="-1">nextTick() <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick()&quot;">​</a></h2><p>Vue 會收集 reactive state 的變更，然後一次性重新渲染 DOM，因此，當 reactive state 改變後，如果需要從 DOM 中獲取已更改的值，必須使用 <code>nextTick()</code>。<code>nextTick()</code> 返回一個 Promise，因此可以使用 <code>await</code> 進行等待。</p><h3 id="試試看-1" tabindex="-1"><a href="https://play.vuejs.org/#eNqNU8tu00AU/ZWRhdRETWyksgpJFKi6gAUgqFh5UWd8k047nhnNXCdBlndsWPAD8A/8FepvcGfGSU14tLu5577OucdukhfGpJsakkkyRaiMLBDmuWJsuqwRtWIWVrM8WaLKE7bgUvBbChEc5smcNQ1zSB0p17VC1rZsmsU+mjHNegMpdNwKg8wB1oYQURltkTVMwQ4vae6IdhUcxQb8a8VatrK6YifE7uS5n8C1csiICpv5goGqpRzmSgIN9SwCHCcMGhYoTdhT1g6pO/Z63lRVuE+Ks8GQzUiCF9sTcXrqgVjeDSEms1hynyp19bGQhBOddFPIGlIkHedaISj0dcW2EHgQNyCivd43BD/UL8Hi4Oru+4+fX77effu8F/SkCY92tOfgofiMWDe7g7uovSICrTcl2jBPRkl0YFwVJr1xWtEnEI6RdwmXJ5N4Ho+RCz7Ok2tE4yZZxktFbSVIsbGpAsyUqbIFlWWW6IkKxrR9cZaepc+yUjjswym4ary0euvA0pA8GfXWZARuwI4tqBIs2MeuPWrrrz5K/bHeb6fjtHQUdGTSSqyPTsJ1ZQQ58tagIBN/O00hpd6+DhjaGg5a+DXw27/gN24XNb2zEJj19GNh10D/lk9ffPDm9ZKVLmvZ2fCP5HtwWtaeYyx7WauSaPfqAttXwWGh1pfuYkdfnNuL8kTDNUJ98OP8P9Lv6dK1D1dsfwG98X8V" target="_blank" rel="noreferrer">試試看</a> <a class="header-anchor" href="#試試看-1" aria-label="Permalink to &quot;[試試看](https://play.vuejs.org/#eNqNU8tu00AU/ZWRhdRETWyksgpJFKi6gAUgqFh5UWd8k047nhnNXCdBlndsWPAD8A/8FepvcGfGSU14tLu5577OucdukhfGpJsakkkyRaiMLBDmuWJsuqwRtWIWVrM8WaLKE7bgUvBbChEc5smcNQ1zSB0p17VC1rZsmsU+mjHNegMpdNwKg8wB1oYQURltkTVMwQ4vae6IdhUcxQb8a8VatrK6YifE7uS5n8C1csiICpv5goGqpRzmSgIN9SwCHCcMGhYoTdhT1g6pO/Z63lRVuE+Ks8GQzUiCF9sTcXrqgVjeDSEms1hynyp19bGQhBOddFPIGlIkHedaISj0dcW2EHgQNyCivd43BD/UL8Hi4Oru+4+fX77effu8F/SkCY92tOfgofiMWDe7g7uovSICrTcl2jBPRkl0YFwVJr1xWtEnEI6RdwmXJ5N4Ho+RCz7Ok2tE4yZZxktFbSVIsbGpAsyUqbIFlWWW6IkKxrR9cZaepc+yUjjswym4ary0euvA0pA8GfXWZARuwI4tqBIs2MeuPWrrrz5K/bHeb6fjtHQUdGTSSqyPTsJ1ZQQ58tagIBN/O00hpd6+DhjaGg5a+DXw27/gN24XNb2zEJj19GNh10D/lk9ffPDm9ZKVLmvZ2fCP5HtwWtaeYyx7WauSaPfqAttXwWGh1pfuYkdfnNuL8kTDNUJ98OP8P9Lv6dK1D1dsfwG98X8V)&quot;">​</a></h3><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://vuejs.org/guide/essentials/reactivity-fundamentals.html" target="_blank" rel="noreferrer">Vue.js-Reactivity Fundamentals</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">MDN-Proxy</a></li></ul>`,23),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
