import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.cc795e4d.js";const d=JSON.parse('{"title":"響應式狀態","description":"","frontmatter":{},"headers":[],"relativePath":"workshop/vue3/reactivity.md","filePath":"workshop/vue3/reactivity.md"}'),p={name:"workshop/vue3/reactivity.md"},o=l(`<h1 id="響應式狀態" tabindex="-1">響應式狀態 <a class="header-anchor" href="#響應式狀態" aria-label="Permalink to &quot;響應式狀態&quot;">​</a></h1><p>在 MVVM 架構下，Model 需要具有響應性，才能讓 ViewModel 自動更新視圖。響應性是指 Model 的狀態變化會自動通知 ViewModel，ViewModel 才能根據 Model 的最新狀態更新視圖。</p><h2 id="ref" tabindex="-1">ref() <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref()&quot;">​</a></h2><ul><li>ref 依賴跟蹤原理基於 getter、setter，所以取用時最後會加上一個 value，這是官方給的示意程式碼 (非實作)：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pseudo code, not actual implementation</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _value: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">track</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// track: 加入觀察者</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._value</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// trigger: 通知觀察者</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pseudo code, not actual implementation</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  _value: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">track</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// track: 加入觀察者</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._value</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// trigger: 通知觀察者</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li>template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count) </span><span style="color:#6A737D;">// { value: 0 }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- template 裡面取用 ref 會自動解包(unwrap)，不需要使用 .value --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ count }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count) </span><span style="color:#6A737D;">// { value: 0 }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">count.value</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count.value) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><p><a href="https://play.vuejs.org/#eNp9kUFLwzAUx79KfJcqzA3ZbXQDlYF6UFHBSy6je+sy0yQkL7NQ+t19SVn1ILv1/X//l/7SdnDr3PQYERZQhsorRyIgRbeSRjXOehKd8LgTvdh524iCq4U00lTWBBJNqMUy8cviAbW24tN6vb0orqQpZ8NxfBAPhI3TG0KehCj3N6uuy8t9X854yqkyLpI4Xjd2i3opgbkERuVs3IYJUOBX71Q9PQRr2LpLuxIq2zil0b84UqwmYSEySWzDZt9POSMfcXLKqz1WX//kh9CmTMKrx4D+iBJGRhtfIw14/f6MLT+PkM2j5vYZ+IbB6pgch9pdNFvW/tPLto/52ytTf4R1S2jC6VJJNDX73JfA/+P+zNV/defTed6Tpof+B7x8phs=" target="_blank" rel="noreferrer">試試看</a></p><h3 id="以觀察者模式理解" tabindex="-1">以觀察者模式理解 <a class="header-anchor" href="#以觀察者模式理解" aria-label="Permalink to &quot;以觀察者模式理解&quot;">​</a></h3><p>我們可以透過不到短短50行的程式碼<a href="https://playcode.io/1605775" target="_blank" rel="noreferrer">實作</a>模擬簡單的 MVVM（Model-View-ViewModel）架構 ref，幫助我們理解：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vue 透過類似機制宣告為響應式狀態</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ref</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ref.target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []; </span><span style="color:#6A737D;">// 存儲所有觀察者的清單</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> _value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 新增觀察者</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">track</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Ref.target </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dep.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(Ref.target); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通知所有觀察者更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dep.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> dep.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 回傳響應式狀態</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">({}, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">track</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _value;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        _value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ref</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 觀察者，模板綁定響應式資料透過類似的機制獲得更新</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">template</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(item).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ref</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Ref.target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item[ref].value; </span><span style="color:#6A737D;">// 將自己添加到觀察者清單</span></span>
<span class="line"><span style="color:#E1E4E8;">      Ref.target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 替換模板中的變數</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">el</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.template.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\{\\{</span><span style="color:#79B8FF;">\\s</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[a-zA-Z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\s</span><span style="color:#F97583;">*</span><span style="color:#85E89D;font-weight:bold;">\\}\\}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ref[key]?.value </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> match</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(el);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vue 透過類似機制宣告為響應式狀態</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ref</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Ref.target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []; </span><span style="color:#6A737D;">// 存儲所有觀察者的清單</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> _value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 新增觀察者</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">track</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Ref.target </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dep.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(Ref.target); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通知所有觀察者更新</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dep.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dep</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> dep.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 回傳響應式狀態</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">({}, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">track</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _value;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        _value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ref</span><span style="color:#24292E;">(value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 觀察者，模板綁定響應式資料透過類似的機制獲得更新</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">template</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(item).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ref</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Ref.target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item[ref].value; </span><span style="color:#6A737D;">// 將自己添加到觀察者清單</span></span>
<span class="line"><span style="color:#24292E;">      Ref.target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 替換模板中的變數</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">el</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.template.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\{\\{</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[a-zA-Z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">*</span><span style="color:#22863A;font-weight:bold;">\\}\\}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">match</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ref[key]?.value </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> match</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(el);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>測試看看：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vue 透過類似機制宣告為響應式狀態</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 模板綁定響應式資料透過類似的機制獲得更新</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;div&gt;{{count}} ({{message}})&lt;/div&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(template, { count, message });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vue 透過類似機制宣告為響應式狀態</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 模板綁定響應式資料透過類似的機制獲得更新</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">template</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;div&gt;{{count}} ({{message}})&lt;/div&gt;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(template, { count, message });</span></span></code></pre></div><p>測試看看：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">message.value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;new message&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">message.value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;new message2&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">count.value</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">message.value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;new message&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">count.value</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">message.value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;new message2&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="元件參考" tabindex="-1">元件參考 <a class="header-anchor" href="#元件參考" aria-label="Permalink to &quot;元件參考&quot;">​</a></h2><p>別忘了元件本質上也是 javascript 物件，當然也可以使用 <code>ref</code> 進行跟蹤取值、調用暴露的方法：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dialog</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dialog&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">dialog</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">&gt; click &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dialog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  dialog.value.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dialog</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dialog&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">dialog</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">&gt; click &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dialog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  dialog.value.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="shallowref" tabindex="-1">shallowRef() <a class="header-anchor" href="#shallowref" aria-label="Permalink to &quot;shallowRef()&quot;">​</a></h3><p>Deep Reactivity：ref 預設會跟蹤其內部的所有對象，如果不是基本(privative)數據類型，它會自動使用 reactive() 來將對象轉換為代理(proxy)。 淺層(Shallow) refs：用於改進性能（當您不希望跟蹤 ref 下的大型對象時），或是 ref 內部對象的狀態由外部函數庫管理。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shallowRef</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">state.value.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 無反應</span></span>
<span class="line"><span style="color:#E1E4E8;">state.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { count: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } </span><span style="color:#6A737D;">// 有反應</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shallowRef</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">state.value.count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 無反應</span></span>
<span class="line"><span style="color:#24292E;">state.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { count: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">// 有反應</span></span></code></pre></div><h2 id="reactive" tabindex="-1">reactive() <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive()&quot;">​</a></h2><ul><li>原理是 javascript proxy。</li><li>只能包裝物件(object, Array, Map/Set ...)，不能包裝基本數據類型。</li><li>使用時不需要加 .value。</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;state.count++&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ state.count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;state.count++&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ state.count }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="試試看" tabindex="-1"><a href="https://play.vuejs.org/#eNqNUU1P3DAQ/SsjXwDBxkj0tF3QthWH9tBWbY+5BGdYDP6SPVlWivLfO3YghOVD3Ox5b+a9edOLLyFU2w7FUqwIbTAN4UXtAFZXHZF3sFZGq7vzWiRiqFK+c3R8XItCAuh7mAEwDKVXjs3MWcnZVP4mFXUgSEhdKCO0DT4S9BCxUaS3CANcR2/hgF0dfM4U5V3iliwD5xPvsGeANZdwCsPRRPQGK+M3hzNXRyAlnGYvo/qFOBGj7MI2obpN3vH6fZ5QPwCpFksolVxjJ/lfixuikJZSqtZxW4tGb2PlkKQLVq6ZJiPraYuL1tv1WXVWfZKtTjQvV5js4ir6+4SRh9TiZCYjubjFuIjoWowYPyq71zaX3oNeyGd1vtrAoVDiBK/1Zi8S5W3QBuOvQJoTfhZNY4y//1FqFDucdlE3qO5eqd+m3bjT74jF2Wx/auIGaYQv//7EHb8n0Pq2Mw9neAP8g3z9LnscaV8717LtGa+4/V4urN3mX7rcEbr0uFQ2WtIo/HKPb++s/mSX055SHP4D1Xge7g==" target="_blank" rel="noreferrer">試試看</a> <a class="header-anchor" href="#試試看" aria-label="Permalink to &quot;[試試看](https://play.vuejs.org/#eNqNUU1P3DAQ/SsjXwDBxkj0tF3QthWH9tBWbY+5BGdYDP6SPVlWivLfO3YghOVD3Ox5b+a9edOLLyFU2w7FUqwIbTAN4UXtAFZXHZF3sFZGq7vzWiRiqFK+c3R8XItCAuh7mAEwDKVXjs3MWcnZVP4mFXUgSEhdKCO0DT4S9BCxUaS3CANcR2/hgF0dfM4U5V3iliwD5xPvsGeANZdwCsPRRPQGK+M3hzNXRyAlnGYvo/qFOBGj7MI2obpN3vH6fZ5QPwCpFksolVxjJ/lfixuikJZSqtZxW4tGb2PlkKQLVq6ZJiPraYuL1tv1WXVWfZKtTjQvV5js4ir6+4SRh9TiZCYjubjFuIjoWowYPyq71zaX3oNeyGd1vtrAoVDiBK/1Zi8S5W3QBuOvQJoTfhZNY4y//1FqFDucdlE3qO5eqd+m3bjT74jF2Wx/auIGaYQv//7EHb8n0Pq2Mw9neAP8g3z9LnscaV8717LtGa+4/V4urN3mX7rcEbr0uFQ2WtIo/HKPb++s/mSX055SHP4D1Xge7g==)&quot;">​</a></h3><h3 id="shallowreactive" tabindex="-1">shallowReactive() <a class="header-anchor" href="#shallowreactive" aria-label="Permalink to &quot;shallowReactive()&quot;">​</a></h3><p>同 shallwRef()</p><h2 id="常犯的錯誤" tabindex="-1">常犯的錯誤 <a class="header-anchor" href="#常犯的錯誤" aria-label="Permalink to &quot;常犯的錯誤&quot;">​</a></h2><ul><li>直接把變數指向其他響應式數據(以為更改響應式數據內容)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// state 現在指向 reactive({ count: 1 }) 這個 proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 現在沒有變數指向 reactive({ count: 0 }) 這個 proxy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// state 現在指向 reactive({ count: 1 }) 這個 proxy</span></span>
<span class="line"><span style="color:#24292E;">state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 現在沒有變數指向 reactive({ count: 0 }) 這個 proxy</span></span></code></pre></div><ul><li>解構賦值(destructure)的內容失去響應性</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// count 現在就只是一個初級資料結構，沒有響應性</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> { count } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#6A737D;">// 不會影響到 state.count</span></span>
<span class="line"><span style="color:#E1E4E8;">count</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({ count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// count 現在就只是一個初級資料結構，沒有響應性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { count } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> state</span></span>
<span class="line"><span style="color:#6A737D;">// 不會影響到 state.count</span></span>
<span class="line"><span style="color:#24292E;">count</span><span style="color:#D73A49;">++</span></span></code></pre></div><h3 id="試看看" tabindex="-1"><a href="https://play.vuejs.org/#eNqNVF1PE0EU/SuTfRGk7PL1VFuCEh70QY36uC9ldygDu7Ob2dkCaZrUiCIpCJqICTTRCFpiREUSQ+Trz3S38ORf8M7Otm6xVZ66c+bee849d26Lyk3XVQs+VtJKhmPbtXIcj+oUoYxJCqMeh2MaFYso+kKlUkYTeBQw6XPuUDRmWMSYzeqKw0ieUNVwfMr7+nRlFA2q7RjKaDKpcwFCCzmLmOPiKNKH1CTyn+T21GG1a6LQj0ZAku36HJtRd4YLrUGc7C2jJZyAo2cw4nLkYe67gBDbdRhHkBWXSCGGcwYnBTAITTHHRtfA0Ws3RLKFOZImpKSHgGoaOFM/LF9sVIJaRcKpOAqFK0vB+svG1mGwvtLYXGyWJnwBmTme02kcl41Hkm2R9whF4HMaDaBSr+RprJ0G1d2OFPXD1W4UkBhsvQv3duKM1vyCb6uylkRQ+P1VWF0OTvYv3p7ptLugQSnIcKjnWFi1nHxPFNyLgCoZJSwDaEgVTAldzuQMNjg6r22Htcr5wcegfBxWnwQ7+8GLo0ScpOCo7d1kUU8vyo6iohi/mEdMCMOKTRQXEsrGv31oUKdNNcNquLfdeP8TvKqfVMOD102aDiQJd2AHZP6ImtR9vvu88eVN6/GgYP9zWK79Ol4JNj5BQ+BkuLQMCLA1KuXwaaV+tNpY/BGsfa0ffQgrZ/XTZ8HjTVmlKQTer1AuK/ZcpV0Gj5nR+OY6GhwYgH57xduXr12sgccXLLEC8apFBU3iwWYspNGk5RizMFMwCXKiSCWlyN3ot3OuOuM5FP5VoizY7ejC0xXYN4EIDJZEnHVlmnPXS2uaYVJIM7FFCkylmGvUtbUxCNMYyCQ27jcde2xYHVZHYFU9noRV7Nn9k8yZ8zCDIrqSStBoABYw62eYmphhdlXaS2lJ6ktXf9ELdvCmBKZwD6Y0RfKXLBHzIhZm91xOYIpt1uQsy5m7E2Gc+bjVizGNjdkO+Iw3L3u6z3CkLNE/z7E85vJ64uFdPA/frUvbMX0rHkOXywcYltYXGmXYLZ+aIDsRF6m9HU2Y0Pwjb2KeY+o1mxJCIzei+Gge4/9o/Y9ccLvlYuk3ZdqHAw==" target="_blank" rel="noreferrer">試看看</a> <a class="header-anchor" href="#試看看" aria-label="Permalink to &quot;[試看看](https://play.vuejs.org/#eNqNVF1PE0EU/SuTfRGk7PL1VFuCEh70QY36uC9ldygDu7Ob2dkCaZrUiCIpCJqICTTRCFpiREUSQ+Trz3S38ORf8M7Otm6xVZ66c+bee849d26Lyk3XVQs+VtJKhmPbtXIcj+oUoYxJCqMeh2MaFYso+kKlUkYTeBQw6XPuUDRmWMSYzeqKw0ieUNVwfMr7+nRlFA2q7RjKaDKpcwFCCzmLmOPiKNKH1CTyn+T21GG1a6LQj0ZAku36HJtRd4YLrUGc7C2jJZyAo2cw4nLkYe67gBDbdRhHkBWXSCGGcwYnBTAITTHHRtfA0Ws3RLKFOZImpKSHgGoaOFM/LF9sVIJaRcKpOAqFK0vB+svG1mGwvtLYXGyWJnwBmTme02kcl41Hkm2R9whF4HMaDaBSr+RprJ0G1d2OFPXD1W4UkBhsvQv3duKM1vyCb6uylkRQ+P1VWF0OTvYv3p7ptLugQSnIcKjnWFi1nHxPFNyLgCoZJSwDaEgVTAldzuQMNjg6r22Htcr5wcegfBxWnwQ7+8GLo0ScpOCo7d1kUU8vyo6iohi/mEdMCMOKTRQXEsrGv31oUKdNNcNquLfdeP8TvKqfVMOD102aDiQJd2AHZP6ImtR9vvu88eVN6/GgYP9zWK79Ol4JNj5BQ+BkuLQMCLA1KuXwaaV+tNpY/BGsfa0ffQgrZ/XTZ8HjTVmlKQTer1AuK/ZcpV0Gj5nR+OY6GhwYgH57xduXr12sgccXLLEC8apFBU3iwWYspNGk5RizMFMwCXKiSCWlyN3ot3OuOuM5FP5VoizY7ejC0xXYN4EIDJZEnHVlmnPXS2uaYVJIM7FFCkylmGvUtbUxCNMYyCQ27jcde2xYHVZHYFU9noRV7Nn9k8yZ8zCDIrqSStBoABYw62eYmphhdlXaS2lJ6ktXf9ELdvCmBKZwD6Y0RfKXLBHzIhZm91xOYIpt1uQsy5m7E2Gc+bjVizGNjdkO+Iw3L3u6z3CkLNE/z7E85vJ64uFdPA/frUvbMX0rHkOXywcYltYXGmXYLZ+aIDsRF6m9HU2Y0Pwjb2KeY+o1mxJCIzei+Gge4/9o/Y9ccLvlYuk3ZdqHAw==)&quot;">​</a></h3><h2 id="nexttick" tabindex="-1">nextTick() <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick()&quot;">​</a></h2><p>Vue 會收集 reactive state 的變更，然後一次性重新渲染 DOM，因此，當 reactive state 改變後，如果需要從 DOM 中獲取已更改的值，必須使用 <code>nextTick()</code>。<code>nextTick()</code> 返回一個 Promise，因此可以使用 <code>await</code> 進行等待。</p><h3 id="試試看-1" tabindex="-1"><a href="https://play.vuejs.org/#eNqNU8tu00AU/ZWRhdRETWyksgpJFKi6gAUgqFh5UWd8k047nhnNXCdBlndsWPAD8A/8FepvcGfGSU14tLu5577OucdukhfGpJsakkkyRaiMLBDmuWJsuqwRtWIWVrM8WaLKE7bgUvBbChEc5smcNQ1zSB0p17VC1rZsmsU+mjHNegMpdNwKg8wB1oYQURltkTVMwQ4vae6IdhUcxQb8a8VatrK6YifE7uS5n8C1csiICpv5goGqpRzmSgIN9SwCHCcMGhYoTdhT1g6pO/Z63lRVuE+Ks8GQzUiCF9sTcXrqgVjeDSEms1hynyp19bGQhBOddFPIGlIkHedaISj0dcW2EHgQNyCivd43BD/UL8Hi4Oru+4+fX77effu8F/SkCY92tOfgofiMWDe7g7uovSICrTcl2jBPRkl0YFwVJr1xWtEnEI6RdwmXJ5N4Ho+RCz7Ok2tE4yZZxktFbSVIsbGpAsyUqbIFlWWW6IkKxrR9cZaepc+yUjjswym4ary0euvA0pA8GfXWZARuwI4tqBIs2MeuPWrrrz5K/bHeb6fjtHQUdGTSSqyPTsJ1ZQQ58tagIBN/O00hpd6+DhjaGg5a+DXw27/gN24XNb2zEJj19GNh10D/lk9ffPDm9ZKVLmvZ2fCP5HtwWtaeYyx7WauSaPfqAttXwWGh1pfuYkdfnNuL8kTDNUJ98OP8P9Lv6dK1D1dsfwG98X8V" target="_blank" rel="noreferrer">試試看</a> <a class="header-anchor" href="#試試看-1" aria-label="Permalink to &quot;[試試看](https://play.vuejs.org/#eNqNU8tu00AU/ZWRhdRETWyksgpJFKi6gAUgqFh5UWd8k047nhnNXCdBlndsWPAD8A/8FepvcGfGSU14tLu5577OucdukhfGpJsakkkyRaiMLBDmuWJsuqwRtWIWVrM8WaLKE7bgUvBbChEc5smcNQ1zSB0p17VC1rZsmsU+mjHNegMpdNwKg8wB1oYQURltkTVMwQ4vae6IdhUcxQb8a8VatrK6YifE7uS5n8C1csiICpv5goGqpRzmSgIN9SwCHCcMGhYoTdhT1g6pO/Z63lRVuE+Ks8GQzUiCF9sTcXrqgVjeDSEms1hynyp19bGQhBOddFPIGlIkHedaISj0dcW2EHgQNyCivd43BD/UL8Hi4Oru+4+fX77effu8F/SkCY92tOfgofiMWDe7g7uovSICrTcl2jBPRkl0YFwVJr1xWtEnEI6RdwmXJ5N4Ho+RCz7Ok2tE4yZZxktFbSVIsbGpAsyUqbIFlWWW6IkKxrR9cZaepc+yUjjswym4ary0euvA0pA8GfXWZARuwI4tqBIs2MeuPWrrrz5K/bHeb6fjtHQUdGTSSqyPTsJ1ZQQ58tagIBN/O00hpd6+DhjaGg5a+DXw27/gN24XNb2zEJj19GNh10D/lk9ffPDm9ZKVLmvZ2fCP5HtwWtaeYyx7WauSaPfqAttXwWGh1pfuYkdfnNuL8kTDNUJ98OP8P9Lv6dK1D1dsfwG98X8V)&quot;">​</a></h3><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><ul><li>響應性狀態3特性： <ul><li>管理一個私有值，並且存取和修改該值都只能透過這個響應性狀態。</li><li>管理一個對象清單，紀錄私有值改變時通知應通知的對象。</li><li>在私有值被修改/賦值時通知依賴於私有值的對象。</li></ul></li><li><code>ref()</code>、<code>reactive()</code> 可包裹私有值，獲得響應性狀態。</li><li><code>ref()</code> 用於包裹初級(primary)資料型態，也可以包裹物件但會自動調用 <code>reactive()</code>。</li><li><code>reactive</code> 用於包裹複雜資料型態。</li><li><code>ref()</code> 可以製作<code>元件參考</code>。</li><li><code>ref()</code>的底層實現是 <code>getter</code>、<code>setter</code>，<code>reactive()</code> 的底層實現是 <code>proxy</code>。</li><li>Vue3 使用了 <code>proxy</code> 因此不支援 IE。</li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://vuejs.org/guide/essentials/reactivity-fundamentals.html" target="_blank" rel="noreferrer">Vue.js-Reactivity Fundamentals</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">MDN-Proxy</a></li></ul>`,37),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
